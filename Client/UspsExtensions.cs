// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MeyerCorp.Usps.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Usps.
    /// </summary>
    public static partial class UspsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='zip5'>
            /// </param>
            /// <param name='zip4'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            public static object VerifyAddress(this IUsps operations, string firmname = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string zip5 = default(string), string zip4 = default(string), string urbanization = default(string))
            {
                return operations.VerifyAddressAsync(firmname, address1, address2, city, state, zip5, zip4, urbanization).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='zip5'>
            /// </param>
            /// <param name='zip4'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> VerifyAddressAsync(this IUsps operations, string firmname = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string zip5 = default(string), string zip4 = default(string), string urbanization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyAddressWithHttpMessagesAsync(firmname, address1, address2, city, state, zip5, zip4, urbanization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zip51'>
            /// </param>
            /// <param name='zip52'>
            /// </param>
            /// <param name='zip53'>
            /// </param>
            /// <param name='zip54'>
            /// </param>
            /// <param name='zip55'>
            /// </param>
            public static object LookupCityState(this IUsps operations, string zip51 = default(string), string zip52 = default(string), string zip53 = default(string), string zip54 = default(string), string zip55 = default(string))
            {
                return operations.LookupCityStateAsync(zip51, zip52, zip53, zip54, zip55).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='zip51'>
            /// </param>
            /// <param name='zip52'>
            /// </param>
            /// <param name='zip53'>
            /// </param>
            /// <param name='zip54'>
            /// </param>
            /// <param name='zip55'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LookupCityStateAsync(this IUsps operations, string zip51 = default(string), string zip52 = default(string), string zip53 = default(string), string zip54 = default(string), string zip55 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupCityStateWithHttpMessagesAsync(zip51, zip52, zip53, zip54, zip55, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            public static ZipCode LookupZipCode(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string))
            {
                return operations.LookupZipCodeAsync(address1, address2, city, firmname, state, urbanization).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ZipCode> LookupZipCodeAsync(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupZipCodeWithHttpMessagesAsync(address1, address2, city, firmname, state, urbanization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId1'>
            /// </param>
            /// <param name='trackId2'>
            /// </param>
            /// <param name='trackId3'>
            /// </param>
            /// <param name='trackId4'>
            /// </param>
            /// <param name='trackId5'>
            /// </param>
            public static object Tracking(this IUsps operations, string trackId1 = default(string), string trackId2 = default(string), string trackId3 = default(string), string trackId4 = default(string), string trackId5 = default(string))
            {
                return operations.TrackingAsync(trackId1, trackId2, trackId3, trackId4, trackId5).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='trackId1'>
            /// </param>
            /// <param name='trackId2'>
            /// </param>
            /// <param name='trackId3'>
            /// </param>
            /// <param name='trackId4'>
            /// </param>
            /// <param name='trackId5'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TrackingAsync(this IUsps operations, string trackId1 = default(string), string trackId2 = default(string), string trackId3 = default(string), string trackId4 = default(string), string trackId5 = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackingWithHttpMessagesAsync(trackId1, trackId2, trackId3, trackId4, trackId5, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object TrackByEmail(this IUsps operations)
            {
                return operations.TrackByEmailAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TrackByEmailAsync(this IUsps operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackByEmailWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            public static ZipCode ProofOfDelivery(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string))
            {
                return operations.ProofOfDeliveryAsync(address1, address2, city, firmname, state, urbanization).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ZipCode> ProofOfDeliveryAsync(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProofOfDeliveryWithHttpMessagesAsync(address1, address2, city, firmname, state, urbanization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            public static ZipCode ReturnReceiptElectronic(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string))
            {
                return operations.ReturnReceiptElectronicAsync(address1, address2, city, firmname, state, urbanization).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='address1'>
            /// </param>
            /// <param name='address2'>
            /// </param>
            /// <param name='city'>
            /// </param>
            /// <param name='firmname'>
            /// </param>
            /// <param name='state'>
            /// </param>
            /// <param name='urbanization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ZipCode> ReturnReceiptElectronicAsync(this IUsps operations, string address1 = default(string), string address2 = default(string), string city = default(string), string firmname = default(string), string state = default(string), string urbanization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReturnReceiptElectronicWithHttpMessagesAsync(address1, address2, city, firmname, state, urbanization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
